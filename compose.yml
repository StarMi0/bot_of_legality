version: '3'

services:
  db:
    image: mysql:latest
    restart: unless-stopped
    container_name: db
    command: --default-authentication-plugin=mysql_native_password
    environment:
      MYSQL_USER: Admin_legal
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_DATABASE: legality
    volumes:
      - $HOME/star/docker/mysql/data:/var/lib/mysql
    networks:
      - mysql-database

  phpmyadmin:
    image: phpmyadmin:latest
    restart: always
    environment:
      PMA_HOST: db
      PMA_USER: root
      PMA_PASSWORD: ${DB_ROOT_PASSWORD}
    ports:
      - 8080:80
    networks:
      - mysql-database

  telegram-bot:
    build:
      context: .  # Контекст сборки - текущий каталог, где находится Dockerfile
    environment:
      # bot env data
      BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      GIT_AUTH_TOKEN: ${GIT_AUTH_TOKEN}
      TOKEN_ADMIN: ${TOKEN_ADMIN}
      # DB env data
      MYSQL_USER: Admin_legal
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_DATABASE: legality
      MYSQL_HOST: ${DB_HOST}
    volumes:
      - .:/app  # Примонтировать текущий каталог (с Dockerfile) внутрь контейнера в /app
    restart: always  # Всегда перезапускать контейнер
    command: python /app/head_bot/main.py  # Команда для запуска вашего бота
    secrets:
      - git_ssh_key
    depends_on:
      - db
    ports:
      - "8081:8080"  # Проброс порта для доступа

  redis:
    image: "redis:latest"
    container_name: "my-redis-container"
    ports:
      - "6379:6379"
    networks:
      - my_network

secrets:
  git_ssh_key:
    file: .env

networks:
  mysql-database:
    driver: bridge
  my_network:
    driver: bridge